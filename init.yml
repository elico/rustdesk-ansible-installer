---
- hosts: localhost
  connection: local 
  gather_facts: true
  vars:
    repo: rustdesk/rustdesk-server
    releases_url: "https://api.github.com/repos/{{ repo }}/releases/latest"
    ipconfig_url: "https://ipconfig.io/json"
    public_domain: "{{ domain }}"
    windows_aio_client_installer: "https://raw.githubusercontent.com/dinger1986/rustdeskinstall/master/WindowsAgentAIOInstall.ps1"
    windows_aio_client_installer_checksum: "sha256:c1654abcc74b0a0612b9ed057b6ea0e6db62881c2afa92ed409cb262a0ca5e03"
    linux_client_installer: "https://raw.githubusercontent.com/dinger1986/rustdeskinstall/master/linuxclientinstall.sh"
    linux_client_installer_checksum: "sha256:476b48f5cd0c2bb3e0e08fe7390788b838bb5d2a9bd2f5a6e6aa2bb93ddc8f58"
  tasks:

    - name: "Retrieving server current public IP from ipconfig.io/json"
      uri:
        url: "{{ ipconfig_url }}"
        return_content: yes
      register: ipconfig_json

    - name: "Extracting public IP address from ipconfig.io/json output"
      set_fact:
        public_ip: "{{ ipconfig_json.json | to_json | from_json |json_query('ip') }}"

    - debug:
        msg: "{{ public_ip }}"

    - name: "Setting public IP address from the domain variable"
      set_fact:
        public_ip: "{{ public_domain }}"
      when: public_domain is defined and public_domain | length > 0

    - debug:
        msg: "{{ public_ip }}"

    - name: "Retriving latest rustdesk-server release information"
      uri:
        url: "{{ releases_url }}"
        return_content: yes
      register: latest_release

    - name: "Extracting tag name from rustdesk-server release information"
      set_fact:
        tag_name: "{{ latest_release.json | to_json|from_json |json_query('assets[*].browser_download_url') }}"

    - name: "Mapping uname machine values to architecture-specific releases"
      set_fact:
        arch_dir: >-
          {{
            'amd64' if ansible_architecture == 'x86_64' else
            'arm64v8' if ansible_architecture == 'aarch64' else
            'armv7' if ansible_architecture == 'armv7l' else
            'i386' if ansible_architecture == 'i386' else
            ''
          }}

    - name: "Filtering Download Urls for the rustdesk-server-linux"
      set_fact:
        download_urls: "{{ latest_release.json | to_json | from_json | json_query('assets[*].browser_download_url|[?contains(@, `rustdesk-server-linux`)]') }}"

    - name: "Extracting download URL for the selected architecture"
      set_fact:
        asset_url: "{{ download_urls | to_json | from_json | json_query(query) | first }}"
      vars:
        query: "[?contains(@, `{{arch_dir }}`)]"

    - name: "Downloading rustdesk-sever latest release zip"
      get_url:
        url: "{{ asset_url }}"
        dest: "/tmp/latest-release.zip"

    - name: "Erasing any existing tmp directories"
      file:
        path: /tmp/rustdesk-extraction
        state: absent


    - name: "Create the tmp directory if it does not exist"
      file:
        path: /tmp/rustdesk-extraction
        state: directory

    - name: "Extracting rustdesk-server to the temporary directory"
      unarchive:
        src: "/tmp/latest-release.zip"
        dest: "/tmp/rustdesk-extraction"
        remote_src: true
#        creates: "/tmp/rustdesk-extraction"

    - name: 'Moving the extracted files of the architecture-specific directory to the the "/usr/local/bin" directory'
      shell: |
        mv -fv "/tmp/rustdesk-extraction/{{ arch_dir }}/hbbr" "/usr/local/bin/hbbr"
        mv -fv "/tmp/rustdesk-extraction/{{ arch_dir }}/hbbs" "/usr/local/bin/hbbs"
        mv -fv "/tmp/rustdesk-extraction/{{ arch_dir }}/rustdesk-utils" "/usr/local/bin/rustdesk-utils"

    - name: "Cleaning up the tmp directory"
      file:
        path: "/tmp/rustdesk-extraction"
        state: absent

    - name: "Cleaning up latest-release tmp file"
      file:
        path: "/tmp/latest-release.zip"
        state: absent

    - name: "Creating /opt/rustdesk directory if it does not exist"
      file:
        path: /opt/rustdesk
        state: directory

    - name: "Creating /var/log/rustdesk directory if it does not exist"
      file:
        path: /var/log/rustdesk
        state: directory

    - name: 'Installing hbbs service files'
      copy:
        src: hbbs.service
        dest: /etc/systemd/system/hbbs.service

    - name: 'Installing hbbr service files'
      copy:
        src: hbbr.service
        dest: /etc/systemd/system/hbbr.service

    - name: "Restarting service hbbr"
      systemd:
        state: restarted
        daemon_reload: true
        name: hbbr
        enabled: true

    - name: "Restarting service hbbs"
      systemd:
        state: restarted
        daemon_reload: true
        name: hbbs
        enabled: true


    - name: "Installing latest version of Apache"
      apt:
        name: apache2
        update_cache: yes
        state: latest
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

    - name: "Installing latest version of httpd"
      dnf:
        name: httpd
        update_cache: yes
        state: latest
      when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == "AlmaLinux"


    - name: "Restarting and Enabling apache"
      service: 
        name: apache2 
        state: started 
        enabled: yes
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

    - name: "Restarting and Enabling httpd"
      service: 
        name: httpd 
        state: started 
        enabled: yes
      when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == "AlmaLinux"

    - name: "Extracting public KEY from: /opt/rustdesk/id_ed25519.pub"
      shell: head -1 "/opt/rustdesk/id_ed25519.pub"
      register: public_key

    - name: "Downloading WindowsAIO Installer"
      ansible.builtin.get_url:
        url: "{{ windows_aio_client_installer }}"
        dest: "/var/www/html/WindowsAgentAIOInstall.ps1"
        checksum: "{{ windows_aio_client_installer_checksum }}"

    - name: "Replace public IP in the Windows AIO script"
      shell: sed -i "s|wanipreg|{{ public_ip }}|g" "/var/www/html/WindowsAgentAIOInstall.ps1"

    - name: "Replace public key in the Windows AIO script"
      shell: sed -i "s|keyreg|{{ public_key.stdout }}|g" "/var/www/html/WindowsAgentAIOInstall.ps1"


    - name: "Downloading linux Client Installer"
      ansible.builtin.get_url:
        url: "{{ linux_client_installer }}"
        dest: "/var/www/html/linuxclientinstall.sh"
        checksum: "{{ linux_client_installer_checksum }}"

    - name: "Replace public IP in the linux client installer script"
      shell: sed -i "s|wanipreg|{{ public_ip }}|g" "/var/www/html/linuxclientinstall.sh"

    - name: "Replace public key in the linux client installer script"
      shell: sed -i "s|keyreg|{{ public_key.stdout }}|g" "/var/www/html/linuxclientinstall.sh"

    - name: 'Copying public key to the /var/www/html folder'
      copy:
        src: /opt/rustdesk/id_ed25519.pub
        dest: /var/www/html/id_ed25519.pub

    - debug:
        msg: "The public key can be downloaded from: http://{{ public_ip }}/id_ed25519.pub"

